Add drivers for smsc ulpi phy

See next patch for explanation.

Signed-off-by: Arnaud Patard <apatard@hupstream.com>
Index: linux/drivers/phy/Kconfig
===================================================================
--- linux.orig/drivers/phy/Kconfig
+++ linux/drivers/phy/Kconfig
@@ -24,6 +24,14 @@ config GENERIC_PHY_MIPI_DPHY
 	  Provides a number of helpers a core functions for MIPI D-PHY
 	  drivers to us.
 
+config PHY_SMSC
+	tristate "SMSC phy support"
+	depends on OF
+	depends on USB_ULPI_BUS
+	select GENERIC_PHY
+	help
+	  Enable this to support SMSC Phys.
+
 config PHY_LPC18XX_USB_OTG
 	tristate "NXP LPC18xx/43xx SoC USB OTG PHY driver"
 	depends on OF && (ARCH_LPC18XX || COMPILE_TEST)
Index: linux/drivers/phy/Makefile
===================================================================
--- linux.orig/drivers/phy/Makefile
+++ linux/drivers/phy/Makefile
@@ -4,6 +4,7 @@
 #
 
 obj-$(CONFIG_GENERIC_PHY)		+= phy-core.o
+obj-$(CONFIG_PHY_SMSC)			+= phy-smsc.o
 obj-$(CONFIG_GENERIC_PHY_MIPI_DPHY)	+= phy-core-mipi-dphy.o
 obj-$(CONFIG_PHY_CAN_TRANSCEIVER)	+= phy-can-transceiver.o
 obj-$(CONFIG_PHY_LPC18XX_USB_OTG)	+= phy-lpc18xx-usb-otg.o
Index: linux/drivers/phy/phy-smsc.c
===================================================================
--- /dev/null
+++ linux/drivers/phy/phy-smsc.c
@@ -0,0 +1,222 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * phy-smsc.c - SMSC USB ULPI PHY driver
+ *
+ * Copyright (C) 2022 Arnaud Patard <apatard@hupstream.com>
+ *
+ */
+#include <linux/module.h>
+#include <linux/bitfield.h>
+#include <linux/delay.h>
+#include <linux/ulpi/driver.h>
+#include <linux/ulpi/regs.h>
+#include <linux/gpio/consumer.h>
+#include <linux/phy/ulpi_phy.h>
+#include <linux/power_supply.h>
+#include <linux/workqueue.h>
+
+#define SMSC_VENDOR_ID 0x0424
+
+#if 0
+static const struct ulpi_device_id smsc_ulpi_id[] = {
+	{ SMSC_VENDOR_ID, 0x0006, },  /* USB331x */
+	{ SMSC_VENDOR_ID, 0x0007, },  /* USB3320 */
+	{ SMSC_VENDOR_ID, 0x0008, },  /* USB334x */
+	{ },
+};
+MODULE_DEVICE_TABLE(ulpi, smsc_ulpi_id);
+#endif
+
+struct smsc {
+	struct ulpi *ulpi;
+	struct phy *phy;
+	/* the phy pin is actually a resetb so input should be low to reset */
+	struct gpio_desc *gpio_reset;
+};
+
+static int smsc_ulpi_write(struct smsc *data, u8 reg, u8 val)
+{
+	int ret;
+
+	ret = ulpi_write(data->ulpi, reg, val);
+	if (ret)
+		dev_err(&data->ulpi->dev, "error %d writing val 0x%02x to reg 0x%02x\n",
+			ret, val, reg);
+
+	return ret;
+}
+
+static int smsc_ulpi_read(struct smsc *data, u8 reg, u8 *val)
+{
+	int ret;
+
+	ret = ulpi_read(data->ulpi, reg);
+	if (ret >= 0) {
+		*val = ret;
+		ret = 0;
+	} else {
+		dev_err(&data->ulpi->dev, "error %d reading reg 0x%02x\n", ret, reg);
+	}
+
+	return ret;
+}
+
+static int smsc_set_vbus(struct smsc *data, bool enable)
+{
+        int ret;
+	u8 value;
+
+	ret = smsc_ulpi_read(data, ULPI_OTG_CTRL, &value);
+	if (ret < 0)
+		return ret;
+
+	value &= ~(ULPI_OTG_CTRL_DRVVBUS | ULPI_OTG_CTRL_DRVVBUS_EXT | ULPI_OTG_CTRL_CHRGVBUS);
+	if (enable) {
+		/* FIXME: make it a device-tree prop */
+		value |= ULPI_OTG_CTRL_DRVVBUS;
+		value |= ULPI_OTG_CTRL_DRVVBUS_EXT;
+		value |= ULPI_OTG_CTRL_CHRGVBUS;
+	}
+
+	return smsc_ulpi_write(data, ULPI_OTG_CTRL, value);
+}
+
+static int smsc_power_on(struct phy *phy)
+{
+	struct smsc *data = phy_get_drvdata(phy);
+
+	return smsc_set_vbus(data, true);
+}
+
+static int smsc_power_off(struct phy *phy)
+{
+	struct smsc *data = phy_get_drvdata(phy);
+
+	return smsc_set_vbus(data, false);
+}
+
+static int smsc_reset(struct phy *phy)
+{
+	struct smsc *data = phy_get_drvdata(phy);
+
+	gpiod_set_value_cansleep(data->gpio_reset, 0);
+	usleep_range(200, 500);
+	gpiod_set_value_cansleep(data->gpio_reset, 1);
+
+	return 0;
+}
+
+static int smsc_set_mode(struct phy *phy, enum phy_mode mode, int submode)
+{
+	struct smsc *data = phy_get_drvdata(phy);
+	int ret;
+	u8 reg;
+
+	ret = smsc_ulpi_read(data, ULPI_OTG_CTRL, &reg);
+	if (ret < 0)
+		return ret;
+
+	switch (mode) {
+	case PHY_MODE_USB_HOST:
+		reg |= (ULPI_OTG_CTRL_EXTVBUSIND
+			| ULPI_OTG_CTRL_DP_PULLDOWN
+			| ULPI_OTG_CTRL_DM_PULLDOWN);
+		break;
+	case PHY_MODE_USB_DEVICE:
+		reg &= ~(ULPI_OTG_CTRL_EXTVBUSIND
+			 |ULPI_OTG_CTRL_DP_PULLDOWN
+			 | ULPI_OTG_CTRL_DM_PULLDOWN);
+		break;
+	default:
+		/* nothing */
+		return 0;
+	}
+
+	return smsc_ulpi_write(data, ULPI_OTG_CTRL, reg);
+}
+
+static int smsc_init(struct phy *phy)
+{
+	return smsc_reset(phy);
+}
+
+static int smsc_exit(struct phy *phy)
+{
+	struct smsc *data = phy_get_drvdata(phy);
+
+	if (data)
+		gpiod_set_value_cansleep(data->gpio_reset, 0);
+
+	return 0;
+}
+
+static const struct phy_ops phy_ops = {
+	.init = smsc_init,
+	.exit = smsc_exit,
+	.power_on  = smsc_power_on,
+	.power_off = smsc_power_off,
+	.reset = smsc_reset,
+	.set_mode = smsc_set_mode,
+	.owner = THIS_MODULE,
+};
+
+static int smsc_probe(struct ulpi *ulpi)
+{
+	struct smsc *data;
+	struct phy_provider *phy_provider;
+
+	data = devm_kzalloc(&ulpi->dev, sizeof(*data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	data->ulpi = ulpi;
+
+	data->gpio_reset = devm_gpiod_get_optional(&ulpi->dev, "reset",
+						   GPIOD_OUT_LOW);
+	if (IS_ERR(data->gpio_reset))
+		return PTR_ERR(data->gpio_reset);
+
+	gpiod_set_value_cansleep(data->gpio_reset, 1);
+
+	/* FIXME: handle clocks */
+
+	data->phy = devm_phy_create(&ulpi->dev, ulpi->dev.of_node,
+					&phy_ops);
+	if (IS_ERR(data->phy))
+		return PTR_ERR(data->phy);
+
+	phy_set_drvdata(data->phy, data);
+	ulpi_set_drvdata(ulpi, data);
+
+	phy_provider = devm_of_phy_provider_register(&ulpi->dev, of_phy_simple_xlate);
+	if (IS_ERR(phy_provider))
+		return PTR_ERR(phy_provider);
+
+	return 0;
+}
+
+static const struct of_device_id smsc_phy_match[] = {
+        { .compatible = "smsc,usb331x", },
+        { .compatible = "smsc,usb3320", },
+        { .compatible = "smsc,usb334x", },
+        { }
+};
+MODULE_DEVICE_TABLE(of, smsc_phy_match);
+
+static struct ulpi_driver smsc_driver = {
+#if 0
+	.id_table = smsc_ulpi_id,
+#endif
+	.probe = smsc_probe,
+	.driver = {
+		.name = "smsc",
+		.of_match_table = smsc_phy_match,
+		.owner = THIS_MODULE,
+	},
+};
+
+module_ulpi_driver(smsc_driver);
+
+MODULE_AUTHOR("Arnaud Patard");
+MODULE_LICENSE("GPL v2");
+MODULE_DESCRIPTION("smsc ULPI PHY driver");
Index: linux/drivers/usb/phy/Kconfig
===================================================================
--- linux.orig/drivers/usb/phy/Kconfig
+++ linux/drivers/usb/phy/Kconfig
@@ -178,6 +178,15 @@ config USB_ULPI
 	  Enable this to support ULPI connected USB OTG transceivers which
 	  are likely found on embedded boards.
 
+config USB_ULPI_PHY
+	tristate "ULPI Phy Driver"
+        depends on BROKEN && (ARM || ARM64 || COMPILE_TEST)
+        select USB_PHY
+	select USB_ULPI
+	help
+	  Enable this to support ULPI connected USB OTG transceivers which
+	  are likely found on embedded boards.
+
 config USB_ULPI_VIEWPORT
 	bool
 	help
Index: linux/drivers/usb/phy/Makefile
===================================================================
--- linux.orig/drivers/usb/phy/Makefile
+++ linux/drivers/usb/phy/Makefile
@@ -22,6 +22,7 @@ obj-$(CONFIG_USB_ISP1301)		+= phy-isp130
 obj-$(CONFIG_USB_MV_OTG)		+= phy-mv-usb.o
 obj-$(CONFIG_USB_MXS_PHY)		+= phy-mxs-usb.o
 obj-$(CONFIG_USB_ULPI)			+= phy-ulpi.o
+obj-$(CONFIG_USB_ULPI_PHY)		+= phy-ulpi-usb.o
 obj-$(CONFIG_USB_ULPI_VIEWPORT)		+= phy-ulpi-viewport.o
 obj-$(CONFIG_KEYSTONE_USB_PHY)		+= phy-keystone.o
 obj-$(CONFIG_JZ4770_PHY)		+= phy-jz4770.o
Index: linux/drivers/usb/phy/phy-ulpi-usb.c
===================================================================
--- /dev/null
+++ linux/drivers/usb/phy/phy-ulpi-usb.c
@@ -0,0 +1,164 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * phy-smsc.c - SMSC USB ULPI PHY driver
+ *
+ * Copyright (C) 2022 Arnaud Patard <apatard@hupstream.com>
+ *
+ */
+#include <linux/module.h>
+#include <linux/bitfield.h>
+#include <linux/delay.h>
+#include <linux/ulpi/driver.h>
+#include <linux/ulpi/regs.h>
+#include <linux/gpio/consumer.h>
+#include <linux/phy/ulpi_phy.h>
+#include <linux/usb/phy.h>
+#include <linux/usb/of.h>
+#include <linux/usb/ulpi.h>
+#include <linux/workqueue.h>
+
+#define ulpi_phy_VENDOR_ID 0x0424
+
+struct ulpi_usb_phy {
+	struct ulpi *ulpi;
+	struct usb_phy *phy;
+	struct usb_phy u_phy;
+	struct gpio_desc *gpio_reset;
+};
+
+static inline struct ulpi_usb_phy *to_ulpi_usb_phy(struct usb_phy *u_phy)
+{
+	return container_of(u_phy, struct ulpi_usb_phy, u_phy);
+}
+
+
+static int ulpi_phy_ulpi_write(struct usb_phy *phy, u32 val, u32 reg)
+{
+	struct ulpi_usb_phy *data = to_ulpi_usb_phy(phy);
+	int ret;
+
+	ret = ulpi_write(data->ulpi, reg&0xff, val&0xff);
+	if (ret)
+		dev_err(&data->ulpi->dev, "error %d writing val 0x%02x to reg 0x%02x\n",
+			ret, val, reg);
+
+	return ret;
+}
+
+static int ulpi_phy_ulpi_read(struct usb_phy *phy, u32 reg)
+{
+	struct ulpi_usb_phy *data = to_ulpi_usb_phy(phy);
+	int ret;
+	u8 val = 0xff;
+
+	ret = ulpi_read(data->ulpi, reg&0xff);
+	if (ret >= 0) {
+		val = ret;
+	} else {
+		dev_err(&data->ulpi->dev, "error %d reading reg 0x%02x\n", ret, reg);
+	}
+
+	return val;
+}
+
+struct usb_phy_io_ops ulpi_phy_access_ops = {
+	.read   = ulpi_phy_ulpi_read,
+	.write  = ulpi_phy_ulpi_write,
+};
+
+static int ulpi_phy_reset(struct usb_phy *phy)
+{
+	struct ulpi_usb_phy *data = to_ulpi_usb_phy(phy);
+
+	dev_info(&data->ulpi->dev, "%s\n", __func__);
+
+	gpiod_set_value_cansleep(data->gpio_reset, 1);
+	usleep_range(200, 500);
+	gpiod_set_value_cansleep(data->gpio_reset, 0);
+
+	return 0;
+}
+
+
+static int ulpi_phy_init(struct usb_phy *phy)
+{
+	struct ulpi_usb_phy *data = to_ulpi_usb_phy(phy);
+
+	dev_info(&data->ulpi->dev, "%s\n", __func__);
+	return ulpi_phy_reset(phy);
+}
+
+static void ulpi_phy_exit(struct usb_phy *phy)
+{
+	struct ulpi_usb_phy *data = to_ulpi_usb_phy(phy);
+
+	dev_info(&data->ulpi->dev, "%s\n", __func__);
+	gpiod_set_value_cansleep(data->gpio_reset, 1);
+}
+
+static int ulpi_phy_probe(struct ulpi *ulpi)
+{
+	struct device_node *np = ulpi->dev.of_node;
+	struct ulpi_usb_phy *data;
+	struct usb_phy *phy;
+	enum usb_phy_interface phy_type;
+
+	data = devm_kzalloc(&ulpi->dev, sizeof(*data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	data->ulpi = ulpi;
+
+	phy_type = of_usb_get_phy_mode(np);
+	if (phy_type != USBPHY_INTERFACE_MODE_ULPI)
+		return -EINVAL;
+
+	data->gpio_reset = devm_gpiod_get_optional(&ulpi->dev, "reset",
+						   GPIOD_OUT_LOW);
+	if (IS_ERR(data->gpio_reset))
+		return PTR_ERR(data->gpio_reset);
+
+	gpiod_set_value_cansleep(data->gpio_reset, 1);
+
+	phy = devm_otg_ulpi_create(&ulpi->dev,
+				   &ulpi_phy_access_ops, 0);
+	if (!phy) {
+		dev_err(&ulpi->dev, "Failed to create ULPI OTG\n");
+		return -ENOMEM;
+	}
+
+	data->phy = phy;
+
+	ulpi_set_drvdata(ulpi, data);
+
+	data->u_phy.dev = &ulpi->dev;
+	data->u_phy.init = ulpi_phy_init;
+	data->u_phy.shutdown = ulpi_phy_exit;
+
+
+	return usb_add_phy_dev(&data->u_phy);
+}
+
+
+static const struct of_device_id ulpi_phy_match[] = {
+	{ .compatible = "smsc,usb331x", },
+	{ .compatible = "smsc,usb3320", },
+	{ .compatible = "smsc,usb334x", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, ulpi_phy_match);
+
+static struct ulpi_driver ulpi_phy_driver = {
+	.probe = ulpi_phy_probe,
+	.driver = {
+		.name = "smsc",
+		.of_match_table = ulpi_phy_match,
+		.owner = THIS_MODULE,
+	},
+};
+
+module_ulpi_driver(ulpi_phy_driver);
+
+MODULE_AUTHOR("Arnaud Patard");
+MODULE_LICENSE("GPL v2");
+MODULE_DESCRIPTION("ULPI PHY driver");
