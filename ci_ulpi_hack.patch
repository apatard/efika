hack for ULPI phy support

- imx51 chipidea needs the clock from the PHY, so the PHY clock and regulators
  needs to be enabled before trying to use the chipidea registers
- efikamx usb need that CHGRVBUS ULPI bit is set to get usb working so the ULPI
  bus provided by chipidea needs to be available before trying to set this bus.

So we're in some kind of dead loop (ulpi phy needs the chipidea and the chipidea
needs the phy). As workaround, since the phy binding allows several phy, just add
code to handle a second phy (even if there's only 1 phy in reality).
This leads to:
- nop-xceiv phy will enable phy and phy clock so it'll enable the clock provided
  to the chipidea IP
- the second SMSC phy will allow to set CHGRVBUS.

signed-off-by: Arnaud Patard <apatard@hupstream.com>
Index: linux/drivers/usb/chipidea/ci.h
===================================================================
--- linux.orig/drivers/usb/chipidea/ci.h
+++ linux/drivers/usb/chipidea/ci.h
@@ -245,6 +245,7 @@ struct ci_hdrc {
 	struct ulpi			*ulpi;
 	struct ulpi_ops 		ulpi_ops;
 	struct phy			*phy;
+	struct phy			*ulpi_phy;
 	/* old usb_phy interface */
 	struct usb_phy			*usb_phy;
 	struct usb_hcd			*hcd;
Index: linux/drivers/usb/chipidea/core.c
===================================================================
--- linux.orig/drivers/usb/chipidea/core.c
+++ linux/drivers/usb/chipidea/core.c
@@ -407,6 +407,8 @@ void ci_platform_configure(struct ci_hdr
 
 	if (is_device_mode) {
 		phy_set_mode(ci->phy, PHY_MODE_USB_DEVICE);
+		if (ci->ulpi_phy)
+			phy_set_mode(ci->ulpi_phy, PHY_MODE_USB_DEVICE);
 
 		if (ci->platdata->flags & CI_HDRC_DISABLE_DEVICE_STREAMING)
 			hw_write(ci, OP_USBMODE, USBMODE_CI_SDIS,
@@ -415,6 +417,8 @@ void ci_platform_configure(struct ci_hdr
 
 	if (is_host_mode) {
 		phy_set_mode(ci->phy, PHY_MODE_USB_HOST);
+		if (ci->ulpi_phy)
+			phy_set_mode(ci->ulpi_phy, PHY_MODE_USB_HOST);
 
 		if (ci->platdata->flags & CI_HDRC_DISABLE_HOST_STREAMING)
 			hw_write(ci, OP_USBMODE, USBMODE_CI_SDIS,
@@ -1093,6 +1097,20 @@ static int ci_hdrc_probe(struct platform
 		return ret;
 	}
 
+	if (ci->ulpi) {
+		ci->ulpi_phy = devm_phy_get(dev->parent, "ulpi-phy");
+		if (IS_ERR(ci->ulpi_phy)) {
+			dev_info(dev, "plop %ld\n", PTR_ERR(ci->ulpi_phy));
+			ci->ulpi_phy = NULL;
+		} else {
+	                ret = phy_init(ci->ulpi_phy);
+			if (ret) {
+				ci->ulpi_phy = NULL;
+				goto deinit_phy;
+			}
+		}
+	}
+
 	ci->hw_bank.phys = res->start;
 
 	ci->irq = platform_get_irq(pdev, 0);
@@ -1220,6 +1238,8 @@ deinit_gadget:
 deinit_host:
 	ci_hdrc_host_destroy(ci);
 deinit_phy:
+	if (ci->ulpi_phy)
+		phy_exit(ci->ulpi_phy);
 	ci_usb_phy_exit(ci);
 ulpi_exit:
 	ci_ulpi_exit(ci);
@@ -1243,6 +1263,10 @@ static int ci_hdrc_remove(struct platfor
 	dbg_remove_files(ci);
 	ci_role_destroy(ci);
 	ci_hdrc_enter_lpm(ci, true);
+	if (ci->ulpi_phy) {
+		phy_power_off(ci->ulpi_phy);
+		phy_exit(ci->ulpi_phy);
+	}
 	ci_usb_phy_exit(ci);
 	ci_ulpi_exit(ci);
 
Index: linux/drivers/usb/chipidea/host.c
===================================================================
--- linux.orig/drivers/usb/chipidea/host.c
+++ linux/drivers/usb/chipidea/host.c
@@ -44,6 +44,13 @@ static int ehci_ci_portpower(struct usb_
 	int ret = 0;
 	int port = HCS_N_PORTS(ehci->hcs_params);
 
+	if (ci->ulpi_phy) {
+		if (enable)
+			phy_power_on(ci->ulpi_phy);
+		else
+			phy_power_off(ci->ulpi_phy);
+	}
+
 	if (priv->reg_vbus && enable != priv->enabled) {
 		if (port > 1) {
 			dev_warn(dev,
